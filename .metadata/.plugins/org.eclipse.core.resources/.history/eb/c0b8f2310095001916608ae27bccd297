package com.zpl.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.zpl.dto.UserDto;
import com.zpl.mapper.RoleMapper;
import com.zpl.mapper.UserMapper;
import com.zpl.pojo.Role;
import com.zpl.pojo.RoleExample;
import com.zpl.pojo.User;
import com.zpl.pojo.UserExample;
import com.zpl.service.IUserService;
@Service
public class UserServiceImpl implements IUserService{
	
	@Autowired
	private UserMapper userMapper;
	@Autowired
	private RoleMapper roleMapper;
	
	@Override
	public List<User> query() {
		UserExample example = new UserExample();
		return userMapper.selectByExample(example);
	}

	@Override
	public Integer addUser(User user)throws Exception{
		// TODO Auto-generated method stub
		return userMapper.insertSelective(user);
	}

	@Override
	public Integer updateUser(User user)throws Exception {
		// TODO Auto-generated method stub
		return userMapper.updateByPrimaryKey(user);
	}

	@Override
	public Integer deleteUser(Integer id)throws Exception {
		// TODO Auto-generated method stub
		return userMapper.deleteByPrimaryKey(id);
	}

	@Override
	public User queryById(Integer id) {
		// TODO Auto-generated method stub
		return userMapper.selectByPrimaryKey(id);
	}
	/**
	 * 查询用户的时候也查询角色也写在userService实现中
	 */
	@Override
	public void getUpdateUserInfo(Integer id, Model m) {
		RoleExample roleExample = new RoleExample();
		List<Role> roles = roleMapper.selectByExample(roleExample);
		if (id != null && id > 0) {
			// 1.表示更新数据，需要根据id查询用户信息
			User user = userMapper.selectByPrimaryKey(id);
			// 2.查询用户具有的角色信息
			List<Integer> roleIds = userMapper.selectRoleIdByUserId(id);
			m.addAttribute("user", user);
			m.addAttribute("roleIds", roleIds);
		}
		m.addAttribute("roles", roles);
	}
	/**
	 * 接更新或增加保存的实现
	 */
	@Override
	public void saveOrUpdate(UserDto userDto) throws Exception{
		// TODO Auto-generated method stub
		// 获取User对象
		User user = userDto.getUser();
		// 获取关联的角色信息
		List<Integer> roleIds = userDto.getRoleIds();
		// 判断是添加还是修改数据
		if(user.getUserId()!=null && user.getUserId() > 0){
			// 表示userId存在，说明是修改
			//修改用户信息
			userMapper.updateByPrimaryKey(user);
			//根据用户Id删除 管理表（关联表）的角色信息
			userMapper.deleteRoleIdByUserId(user.getUserId());
			// 再保存用户和角色的关联关系
			if(roleIds!=null && roleIds.size() > 0){
				for (Integer roleId : roleIds) {
					userMapper.inserUserIdAndRoleId(user.getUserId(),roleId);
				}
			}
		}else{
			// 不存在id说明是添加数据
			// 先添加用户数据 获取生成的userId
			//userMapper.insertSelective(user);
			this.addUser(user);
			// 再保存用户和角色的对应关系，在一个事务中处理
			if(roleIds!=null && roleIds.size() > 0){
				for (Integer roleId : roleIds) {
					userMapper.inserUserIdAndRoleId(user.getUserId(),roleId);
				}
			}
		}
	}
}
